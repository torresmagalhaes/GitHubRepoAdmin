{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\code-local-repo\\\\TesteW12Github\\\\EvoHub.SPA\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GithubApiService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n  }\n\n  mapApiResultToRepository(apiResult) {\n    return apiResult.result.map(r => ({\n      id: r.id,\n      name: r.name,\n      owner: {\n        login: r.owner.login\n      },\n      description: r.description,\n      language: r.language,\n      updatedAt: r.updatedAt,\n      url: r.url\n    }));\n  }\n\n  listRepositories() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this.http.get(_this.baseUrl + 'githubapi/repositories');\n      return result.pipe(map(_this.mapApiResultToRepository));\n    })();\n  }\n\n  getRepository(owner, id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = yield _this2.http.get(_this2.baseUrl + `githubapi/repository?owner=${owner}&id=${id}`);\n      return result.pipe(map(_this2.mapApiResultToRepository));\n    })();\n  }\n\n  listRepositoriesByName(name) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const result = awaitthis.http.get(_this3.baseUrl + `githubapi/repositories?name=${name}`);\n      return result.pipe(map(_this3.mapApiResultToRepository));\n    })();\n  }\n\n}\n\nGithubApiService.ɵfac = function GithubApiService_Factory(t) {\n  return new (t || GithubApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\n\nGithubApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GithubApiService,\n  factory: GithubApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["D:/code-local-repo/TesteW12Github/EvoHub.SPA/ClientApp/src/app/services/github-api.service.ts"],"names":["map","i0","i1","GithubApiService","constructor","http","baseUrl","mapApiResultToRepository","apiResult","result","r","id","name","owner","login","description","language","updatedAt","url","listRepositories","get","pipe","getRepository","listRepositoriesByName","awaitthis","ɵfac","GithubApiService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACvB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;AACDC,EAAAA,wBAAwB,CAACC,SAAD,EAAY;AAChC,WAAOA,SAAS,CAACC,MAAV,CAAiBT,GAAjB,CAAqBU,CAAC,KAAK;AAC9BC,MAAAA,EAAE,EAAED,CAAC,CAACC,EADwB;AAE9BC,MAAAA,IAAI,EAAEF,CAAC,CAACE,IAFsB;AAG9BC,MAAAA,KAAK,EAAE;AACHC,QAAAA,KAAK,EAAEJ,CAAC,CAACG,KAAF,CAAQC;AADZ,OAHuB;AAM9BC,MAAAA,WAAW,EAAEL,CAAC,CAACK,WANe;AAO9BC,MAAAA,QAAQ,EAAEN,CAAC,CAACM,QAPkB;AAQ9BC,MAAAA,SAAS,EAAEP,CAAC,CAACO,SARiB;AAS9BC,MAAAA,GAAG,EAAER,CAAC,CAACQ;AATuB,KAAL,CAAtB,CAAP;AAWH;;AACKC,EAAAA,gBAAgB,GAAG;AAAA;;AAAA;AACrB,YAAMV,MAAM,SAAS,KAAI,CAACJ,IAAL,CAAUe,GAAV,CAAc,KAAI,CAACd,OAAL,GAAe,wBAA7B,CAArB;AACA,aAAOG,MAAM,CAACY,IAAP,CAAYrB,GAAG,CAAC,KAAI,CAACO,wBAAN,CAAf,CAAP;AAFqB;AAGxB;;AACKe,EAAAA,aAAa,CAACT,KAAD,EAAQF,EAAR,EAAY;AAAA;;AAAA;AAC3B,YAAMF,MAAM,SAAS,MAAI,CAACJ,IAAL,CAAUe,GAAV,CAAc,MAAI,CAACd,OAAL,GAAgB,8BAA6BO,KAAM,OAAMF,EAAG,EAA1E,CAArB;AACA,aAAOF,MAAM,CAACY,IAAP,CAAYrB,GAAG,CAAC,MAAI,CAACO,wBAAN,CAAf,CAAP;AAF2B;AAG9B;;AACKgB,EAAAA,sBAAsB,CAACX,IAAD,EAAO;AAAA;;AAAA;AAC/B,YAAMH,MAAM,GAAGe,SAAS,CAACnB,IAAV,CAAee,GAAf,CAAmB,MAAI,CAACd,OAAL,GAAgB,+BAA8BM,IAAK,EAAtE,CAAf;AACA,aAAOH,MAAM,CAACY,IAAP,CAAYrB,GAAG,CAAC,MAAI,CAACO,wBAAN,CAAf,CAAP;AAF+B;AAGlC;;AA7ByB;;AA+B9BJ,gBAAgB,CAACsB,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAIxB,gBAAV,EAA4BF,EAAE,CAAC2B,QAAH,CAAY1B,EAAE,CAAC2B,UAAf,CAA5B,EAAwD5B,EAAE,CAAC2B,QAAH,CAAY,UAAZ,CAAxD,CAAP;AAA0F,CAAzJ;;AACAzB,gBAAgB,CAAC2B,KAAjB,GAAyB,aAAc7B,EAAE,CAAC8B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE7B,gBAAT;AAA2B8B,EAAAA,OAAO,EAAE9B,gBAAgB,CAACsB,IAArD;AAA2DS,EAAAA,UAAU,EAAE;AAAvE,CAAtB,CAAvC","sourcesContent":["import { map } from 'rxjs/operators';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class GithubApiService {\r\n    constructor(http, baseUrl) {\r\n        this.http = http;\r\n        this.baseUrl = baseUrl;\r\n    }\r\n    mapApiResultToRepository(apiResult) {\r\n        return apiResult.result.map(r => ({\r\n            id: r.id,\r\n            name: r.name,\r\n            owner: {\r\n                login: r.owner.login\r\n            },\r\n            description: r.description,\r\n            language: r.language,\r\n            updatedAt: r.updatedAt,\r\n            url: r.url\r\n        }));\r\n    }\r\n    async listRepositories() {\r\n        const result = await this.http.get(this.baseUrl + 'githubapi/repositories');\r\n        return result.pipe(map(this.mapApiResultToRepository));\r\n    }\r\n    async getRepository(owner, id) {\r\n        const result = await this.http.get(this.baseUrl + `githubapi/repository?owner=${owner}&id=${id}`);\r\n        return result.pipe(map(this.mapApiResultToRepository));\r\n    }\r\n    async listRepositoriesByName(name) {\r\n        const result = awaitthis.http.get(this.baseUrl + `githubapi/repositories?name=${name}`);\r\n        return result.pipe(map(this.mapApiResultToRepository));\r\n    }\r\n}\r\nGithubApiService.ɵfac = function GithubApiService_Factory(t) { return new (t || GithubApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL')); };\r\nGithubApiService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: GithubApiService, factory: GithubApiService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}